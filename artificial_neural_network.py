# -*- coding: utf-8 -*-
"""artificial_neural_network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D6D6bRA3NMD_IQ1zqvU8Wtq-sn8WflqD

# Artificial Neural Network

### Importing the libraries

## Part 1 - Data Preprocessing
"""

import numpy as np
import tensorflow as tf
import pandas as pd

tf.__version__

"""### Importing the dataset"""

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:, -1].values

print(X)

print(y)

"""### Encoding categorical data

Label Encoding the "Gender" column
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
X[:, 2] = le.fit_transform(X[: ,2])

print(X)

"""One Hot Encoding the "Geography" column"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential() #from models class we can initialize the ANN by using sequential

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))
 #tujuan utamanya ini itu bikin class baru yg udh di add layernya pake dense class
#layers itu module, units itu total neuron yg lu mau lu hrs coba2 sampe accuracy mana yg bagus, actvation ya pakenya yg rectifier function

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid')) # sigmoid beecause we want to knwo the probability and this only have one output classfication but if there is three we need to hard encode the y value and also  after that we need to use softmax as the activation

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer = 'adam' , loss = 'binary_crossentropy' , metrics = ['accuracy'] ) # optimizer code name is adam and also the loss would be binary for this case but if there is more than one classification it would be categorycall_classentropy

"""### Training the ANN on the Training set"""

ann.fit(X_train, y_train,batch_size = 32, epochs = 100)

"""## Part 4 - Making the predictions and evaluating the model

### Predicting the result of a single observation

Example of the Machine's prediction for a single observation:

Geography: France

Credit Score: 600

Gender: Male

Age: 40 years old

Tenure: 3 years

Balance: \$ 60000

Number of Products: 2

Does this customer have a credit card? Yes

Is this customer an Active Member: Yes

Estimated Salary: \$ 50000

**Solution**
"""

print(ann.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]]))>0.5) # jgn lupa scaling methodnya di apply scale single observationnya krn kita train modelnya juga di scale jd hrs scale observationnya

"""Therefore, the ANN model predicts that this customer stays in the bank

### Predicting the Test set results

---

\### Making the Confusion Matrix

*   List item
*   List item
"""

y_pred = ann.predict(X_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)